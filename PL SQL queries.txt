DROP TABLE REQUEST;
DROP TABLE MOBILE_NUMBERS;
DROP TABLE CAR;
DROP TABLE APP_USER;
DROP TABLE DRIVER;
DROP TABLE LOCATION;
DROP TABLE ADMIN;


--LOCATION
CREATE TABLE LOCATION (
	LOCATION_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
	STREET VARCHAR2(100),
	CITY VARCHAR2(60),
	POSTAL_CODE VARCHAR2(20),
	LONGITUDE NUMBER(*, 8) NOT NULL,
	LATITUDE NUMBER(*, 8) NOT NULL,
        CONSTRAINT LOCATION_PK PRIMARY KEY(LOCATION_ID)
);


CREATE TABLE ADMIN (
	ADMIN_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
	FIRST_NAME VARCHAR2(40) NOT NULL,
	MIDDLE_NAME VARCHAR2(40),
	LAST_NAME VARCHAR2(40),
	USERNAME VARCHAR2(40) NOT NULL UNIQUE,
	PASSWORD VARCHAR2(40) NOT NULL CHECK(LENGTH(PASSWORD) > 3),
	EMAIL VARCHAR2(50) UNIQUE NOT NULL CHECK(EMAIL LIKE '%_@_%._%'),
	JOIN_DATE DATE DEFAULT SYSDATE NOT NULL,
	SALARY NUMBER NOT NULL,
	PHOTO VARCHAR2(100),
	DATE_OF_BIRTH DATE DEFAULT SYSDATE NOT NULL,
	LOCATION_ID NUMBER,
  CONSTRAINT ADMIN_PK PRIMARY KEY(ADMIN_ID),
	CONSTRAINT ADMIN_FK FOREIGN KEY(LOCATION_ID) REFERENCES LOCATION(LOCATION_ID)
);


--USER TABLE
CREATE TABLE APP_USER (
	USER_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
	FIRST_NAME VARCHAR2(40) NOT NULL,
	MIDDLE_NAME VARCHAR2(40),
	LAST_NAME VARCHAR2(40),
	USERNAME VARCHAR2(40) NOT NULL UNIQUE,
	PASSWORD VARCHAR2(40) NOT NULL CHECK(LENGTH(PASSWORD) > 3),
	EMAIL VARCHAR2(50) UNIQUE NOT NULL CHECK(EMAIL LIKE '%_@_%._%'),
	TOTAL_RATING NUMBER,
	NUM_OF_RATING NUMBER,
	PHOTO VARCHAR2(100),
	DATE_OF_BIRTH DATE DEFAULT SYSDATE NOT NULL,
	LOCATION_ID NUMBER,
  CONSTRAINT USER_PK PRIMARY KEY(USER_ID),
	CONSTRAINT APP_USER_FK FOREIGN KEY(LOCATION_ID) REFERENCES LOCATION(LOCATION_ID)
);


--DRIVER TABLE

CREATE TABLE DRIVER (
	DRIVER_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
	FIRST_NAME VARCHAR2(40) NOT NULL,
	MIDDLE_NAME VARCHAR2(40),
	LAST_NAME VARCHAR2(40),
	USERNAME VARCHAR2(40) NOT NULL UNIQUE,
	PASSWORD VARCHAR2(40) NOT NULL CHECK(LENGTH(PASSWORD) > 3),
	EMAIL VARCHAR2(50) UNIQUE NOT NULL CHECK(EMAIL LIKE '%_@_%._%'),
	TOTAL_RATING NUMBER,
	NUM_OF_RATING NUMBER,
	PHOTO VARCHAR2(100),
	DATE_OF_BIRTH DATE DEFAULT SYSDATE NOT NULL,
	LOCATION_ID NUMBER,
  CONSTRAINT DRIVER_PK PRIMARY KEY(DRIVER_ID),
	CONSTRAINT DRIVER_FK FOREIGN KEY(LOCATION_ID) REFERENCES LOCATION(LOCATION_ID)
);


CREATE TABLE MOBILE_NUMBERS(
	MOBILE_NUMBER CHAR(11) CONSTRAINT MOB_NUM_PK PRIMARY KEY CHECK(LENGTH(MOBILE_NUMBER) = 11),
	USER_ID NUMBER,
	DRIVER_ID NUMBER,
	ADMIN_ID NUMBER,
	CONSTRAINT MOB_NUM_CHECK CHECK( USER_ID IS NOT NULL OR DRIVER_ID IS NOT NULL OR ADMIN_ID IS NOT NULL)

);


--CAR TABLE
CREATE TABLE CAR(
	NAME_PLATE VARCHAR2(30) NOT NULL,
	MODEL VARCHAR2(40),
	COLOR VARCHAR2(30),
	PHOTO VARCHAR2(100),
	OWNER_USER_ID NUMBER,
	DRIVER_ID NUMBER,
	INS_TYPE VARCHAR2(20) NOT NULL,
	INS_START_DATE DATE,
	INS_END_DATE DATE,
	LAST_PAYMENT_DATE DATE,
  	CONSTRAINT CAR_PK PRIMARY KEY(NAME_PLATE),
	CONSTRAINT CAR_FK_DRIVER FOREIGN KEY(DRIVER_ID) REFERENCES DRIVER(DRIVER_ID),
	CONSTRAINT CAR_FK_OWNER FOREIGN KEY(OWNER_USER_ID) REFERENCES APP_USER(USER_ID),
	CONSTRAINT CAR_DATES_CHECK CHECK ( (INS_START_DATE < INS_END_DATE) AND (LAST_PAYMENT_DATE >= INS_START_DATE)) 
);

-- REQUEST TABLE

CREATE TABLE REQUEST(
	REQUEST_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
	START_TIME TIMESTAMP NOT NULL,
	END_TIME TIMESTAMP NOT NULL,
	PICK_UP_LOCATION_ID NUMBER NOT NULL,
	DESTINATION_LOCATION_ID NUMBER NOT NULL,
	APPROX_FARE NUMBER NOT NULL,
	STATUS VARCHAR2(10),
	USER_ID NUMBER NOT NULL,
	DRIVER_ID NUMBER,
  CONSTRAINT REQUEST_PK PRIMARY KEY(REQUEST_ID),
	CONSTRAINT REQUEST_FK_PUP FOREIGN KEY(PICK_UP_LOCATION_ID) REFERENCES LOCATION(LOCATION_ID) ON DELETE CASCADE,
	CONSTRAINT REQUEST_FK_DEST FOREIGN KEY(DESTINATION_LOCATION_ID) REFERENCES LOCATION(LOCATION_ID) ON DELETE CASCADE,
	CONSTRAINT REQUEST_FK_USER FOREIGN KEY(USER_ID) REFERENCES APP_USER(USER_ID),
	CONSTRAINT REQUEST_FK_DRIVER FOREIGN KEY(DRIVER_ID) REFERENCES DRIVER(DRIVER_ID)
);


--MESSAGES TABLE
DROP TABLE MESSAGES;
CREATE TABLE MESSAGES (
	MESSAGE_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
	MESSAGE_TEXT VARCHAR2(500) NOT NULL,
	USER_ID NUMBER,
	DRIVER_ID NUMBER,
	SENDER VARCHAR2(7) NOT NULL,
	SENDING_TIME DATE NOT NULL,
	CONSTRAINT MESSAGES_FK_USER FOREIGN KEY(USER_ID) REFERENCES APP_USER(USER_ID),
	CONSTRAINT MESSAGES_FK_DRIVER FOREIGN KEY(DRIVER_ID) REFERENCES DRIVER(DRIVER_ID)
);

PL/SQL STATEMENTS:

1. =========================== FOR DELETING USER ACCOUNT===================
CREATE OR REPLACE TRIGGER DELETE_USER
BEFORE DELETE
ON APP_USER
FOR EACH ROW

DECLARE

BEGIN

	DELETE FROM MOBILE_NUMBERS WHERE USER_ID = :OLD.USER_ID AND DRIVER_ID IS NULL AND ADMIN_ID IS NULL;
	UPDATE MOBILE_NUMBERS SET USER_ID = NULL WHERE USER_ID = :OLD.USER_ID;
	DELETE FROM REQUEST WHERE USER_ID = :OLD.USER_ID;
	DELETE FROM MESSAGES WHERE USER_ID = :OLD.USER_ID;
	DELETE FROM CAR WHERE OWNER_USER_ID = :OLD.USER_ID;

END;
/

============================== FOR DELETING DRIVER ACCOUNT ===================================


CREATE OR REPLACE TRIGGER DELETE_DRIVER
BEFORE DELETE
ON DRIVER
FOR EACH ROW

DECLARE

BEGIN

	DELETE FROM MOBILE_NUMBERS WHERE DRIVER_ID = :OLD.DRIVER_ID AND USER_ID IS NULL AND ADMIN_ID IS NULL;
	UPDATE MOBILE_NUMBERS SET DRIVER_ID = NULL WHERE DRIVER_ID = :OLD.DRIVER_ID;
	UPDATE REQUEST SET DRIVER_ID = NULL WHERE DRIVER_ID = :OLD.DRIVER_ID;
	DELETE FROM MESSAGES WHERE DRIVER_ID = :OLD.DRIVER_ID;
	UPDATE CAR SET DRIVER_ID = NULL WHERE DRIVER_ID = :OLD.DRIVER_ID;

END;
/

===============================DELETING ADMIN ACCOUTN ==========================================

CREATE OR REPLACE TRIGGER DELETE_ADMIN
BEFORE DELETE
ON ADMIN
FOR EACH ROW

DECLARE

BEGIN

	DELETE FROM MOBILE_NUMBERS WHERE ADMIN_ID = :OLD.ADMIN_ID AND USER_ID IS NULL AND DRIVER_ID IS NULL;
	UPDATE MOBILE_NUMBERS SET ADMIN_ID = NULL WHERE ADMIN_ID = :OLD.ADMIN_ID;

END;
/


2. =====================GETTING DRIVER_NAME FUNCTION

CREATE OR REPLACE FUNCTION DRIVER_NAME(D_ID IN NUMBER)
RETURN VARCHAR2 IS
	NAME VARCHAR2(122);
	M_NAME VARCHAR2(40);
	L_NAME VARCHAR2(40);
	
BEGIN
	SELECT FIRST_NAME, MIDDLE_NAME, LAST_NAME INTO NAME, M_NAME, L_NAME FROM DRIVER WHERE DRIVER_ID = D_ID;

	IF M_NAME IS NOT NULL THEN
		NAME := (NAME || ' ' || M_NAME);
	END IF;
		
	IF L_NAME IS NOT NULL THEN
		NAME := (NAME || ' ' || L_NAME);
	END IF;
	
	RETURN NAME;
	
	
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN 'NO DRIVER INFO';
	WHEN VALUE_ERROR THEN
		RETURN 'NO DRIVER INFO';
	WHEN INVALID_NUMBER THEN
		RETURN 'NO DRIVER INFO';
	WHEN OTHERS THEN
		RETURN 'NO DRIVER INFO';
	
END;
/


======================getting user name===========================

CREATE OR REPLACE FUNCTION USER_NAME(U_ID IN NUMBER)
RETURN VARCHAR2 IS
	NAME VARCHAR2(122);
	M_NAME VARCHAR2(40);
	L_NAME VARCHAR2(40);
	
BEGIN
	SELECT FIRST_NAME, MIDDLE_NAME, LAST_NAME INTO NAME, M_NAME, L_NAME FROM APP_USER WHERE USER_ID = U_ID;

	IF M_NAME IS NOT NULL THEN
		NAME := (NAME || ' ' || M_NAME);
	END IF;
		
	IF L_NAME IS NOT NULL THEN
		NAME := (NAME || ' ' || L_NAME);
	END IF;
	
	RETURN NAME;
	
	
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN 'NO USER INFO';
	WHEN VALUE_ERROR THEN
		RETURN 'NO USER INFO';
	WHEN INVALID_NUMBER THEN
		RETURN 'NO USER INFO';
	WHEN OTHERS THEN
		RETURN 'NO USER INFO';
	
END;
/

3. GETTNG LOCATION_STRING

CREATE OR REPLACE FUNCTION LOCATION_STRING(L_ID IN NUMBER)
RETURN VARCHAR2 IS
	NAME VARCHAR2(162);
	STREET_NAME VARCHAR2(100);
	CITY_NAME VARCHAR2(60);
	
BEGIN
	SELECT STREET, CITY INTO STREET_NAME, CITY_NAME FROM LOCATION WHERE LOCATION_ID = L_ID;

	IF STREET_NAME IS NOT NULL THEN
		NAME := (NAME || ' ' || STREET_NAME);
	END IF;
		
	IF CITY_NAME IS NOT NULL THEN
		NAME := (NAME || ' ' || CITY_NAME);
	END IF;
	
	RETURN NAME;
	
	
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN 'INVALID_LOC_ID';
	WHEN VALUE_ERROR THEN
		RETURN 'INVALID_LOC_ID';
	WHEN INVALID_NUMBER THEN
		RETURN 'INVALID_LOC_ID';
	WHEN OTHERS THEN
		RETURN 'INVALID_LOC_ID';
		-- WE HAVE RETURNED INVALID_LOC_ID FOR HANDLING DATA WITH CONVENIENCE IN PROJECT;
	
END;
/

4. =======================GETTING DRIVER RATING=====================

CREATE OR REPLACE FUNCTION DRIVER_RATING(D_ID IN NUMBER)
RETURN NUMBER IS
	TOT_RATING NUMBER;
	AVG_RATING NUMBER;
	NUM_RATING NUMBER;
	
BEGIN
	SELECT TOTAL_RATING, NUM_OF_RATING INTO TOT_RATING, NUM_RATING FROM DRIVER WHERE DRIVER_ID = D_ID;
	
	AVG_RATING := 0;
	
	IF TOT_RATING IS NOT NULL THEN
		AVG_RATING := ROUND(TOT_RATING / NUM_RATING, 2);
	END IF;
	
	RETURN AVG_RATING;
	
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN 0;
	WHEN VALUE_ERROR THEN
		RETURN 0;
	WHEN INVALID_NUMBER THEN
		RETURN 0;
	WHEN ZERO_DIVIDE THEN
		RETURN 0;
	WHEN OTHERS THEN
		RETURN 0;
	
END;
/

==================getting user rating==========================

CREATE OR REPLACE FUNCTION USER_RATING(U_ID IN NUMBER)
RETURN NUMBER IS
	TOT_RATING NUMBER;
	AVG_RATING NUMBER;
	NUM_RATING NUMBER;
	
BEGIN
	SELECT TOTAL_RATING, NUM_OF_RATING INTO TOT_RATING, NUM_RATING FROM APP_USER WHERE USER_ID = U_ID;
	
	AVG_RATING := 0;
	
	IF TOT_RATING IS NOT NULL THEN
		AVG_RATING := ROUND(TOT_RATING / NUM_RATING, 2);
	END IF;
	
	RETURN AVG_RATING;
	
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN 0;
	WHEN VALUE_ERROR THEN
		RETURN 0;
	WHEN INVALID_NUMBER THEN
		RETURN 0;
	WHEN ZERO_DIVIDE THEN
		RETURN 0;
	WHEN OTHERS THEN
		RETURN 0;
	
END;
/



DELETE FROM MOBILE_NUMBERS;
DELETE FROM MESSAGES;
DELETE FROM CAR;
DELETE FROM REQUEST;
DELETE FROM APP_USER;
DELETE FROM ADMIN;
DELETE FROM DRIVER;
DELETE FROM LOCATION;




DATA INSERT FOR SEE DATA IN WEBSITE:================================== for seeing due payment======================= in admin
INSERT INTO CAR (NAME_PLATE, MODEL, COLOR, OWNER_USER_ID, INS_TYPE, INS_START_DATE, INS_END_DATE, LAST_PAYMENT_DATE)
VALUES('Dummy', 'Dummy', 'Black', 21, 'Annual', SYSDATE - INTERVAL '6' MONTH, SYSDATE + INTERVAL '6' MONTH, SYSDATE - INTERVAL '50' DAY);

INSERT INTO CAR (NAME_PLATE, MODEL, COLOR, OWNER_USER_ID, INS_TYPE, INS_START_DATE, INS_END_DATE, LAST_PAYMENT_DATE)
VALUES('Dummy1', 'Dummy', 'Black', 21, 'Annual', SYSDATE - INTERVAL '6' MONTH, SYSDATE + INTERVAL '6' MONTH, SYSDATE - INTERVAL '62' DAY);



===============for seeing expired insurance============================
INSERT INTO CAR (NAME_PLATE, MODEL, COLOR, OWNER_USER_ID, INS_TYPE, INS_START_DATE, INS_END_DATE, LAST_PAYMENT_DATE)
VALUES('Dummy4', 'Dummy', 'Black', 21, 'Annual', SYSDATE - INTERVAL '13' MONTH, SYSDATE - INTERVAL '1' MONTH, SYSDATE - INTERVAL '60' DAY);
